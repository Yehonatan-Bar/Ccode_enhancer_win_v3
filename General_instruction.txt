The document @General_instructions.txt is of utmost importance — read it thoroughly and follow its instructions carefully.

1. Before you start, read  README.md and  project_structure.json to stay ancored to the existing code structure style conventions etc. 
2. The folder structure and the design of the project are intended to be highly modular and easy to maintain.

Logs workflow:
3.1 Before starting work, choose the commit name.
3.2 Make sure to add all the necessary tags to the logs, including the commit.
3.3 Add and toggle the relevant logs in @logging.json
3.4 After completing the task and toggling the relevant tags, restart the server and check the app.log file in the logs folder to verify that everything looks correct
3.5 in the summery, tell the user the commit name you chose. 

4. Remember! You must update README.md and  project_structure.json after each step!

5. If you need information about anything in the system, read the file MD_files\CONTENTS.md it will direct you to the relevant documentation

6. The to-do list must always end with:
     ☐ Update logging configuration for [commit name]
     ☐ Run the server and check the app.log file to make sure everything is working properly.
     ☐ Update project documentation (README.md and project_structure.json)

6. When working on code (new or existing), replace any console.log statements with appropriate logger calls:
   - Use logger.info(), logger.error(), logger.warn(), or logger.debug()
   - Include appropriate feature and module tags
   - This ensures all logs are captured in app.log and follow the logging configuration

7. Throughout the project, there are README files inside folders that provide relevant information about the code and the project structure. If you want to understand what’s going on, start by reading them. If you make changes in areas they cover — update them accordingly.

8. If relevant, Shut down the server, start it up again, and read the new log file in the logs folder.

9. use plan mode

10. If you wrote code, always run it, test it, and read the generated logs — it’s mandatory, and you must do it.

11. **Context:** run_roles_wrapper.py is a code review function that performs code analysis and returns recommendations for improvements and fixes. It is mandatory to implement all recommendations received from this tool. read  README_RUN_ROLES.md to understand it. 

If you are developing, updating, or modifying code - this script is extremely important and must be an integral part of your development process. You must integrate it into every step and code update you make.

First, add to the Todo list: to switch to a new branch, add a commit, and push the current code before starting work, so you begin with a clean slate.

I want to see it after every todo in your todo list that involves code development.

The call is made by adding the user's request and a description of how you implemented it:
```
python run_roles_wrapper.py --additional-context  "user request and how you implemented it"
```

**Important:** After receiving the recommendations from run_roles.py, you MUST:
1. Implement all the suggested fixes and improvements
2. After implementing the recommendations, perform git add, commit, and push to the current branch

**Example 1:** If the user requested to add user authentication via Google, and you're implementing it:
When you're at this todo list step: Implement endpoint for /auth/google
Then in your todo list after this, there will be a step to call run_roles like this:
```
python run_roles_wrapper.py --additional-context "User requested to add user authentication via Google, and I implemented the /auth/google endpoint"
```
Followed by:
- Implement recommendations from run_roles.py
- git add, commit & push changes to current branch

**Example 2:** If the user requested to add a shopping cart feature, and you're implementing it:
When you're at this todo list step: Create cart management API endpoints
Then in your todo list after this, there will be a step to call run_roles like this:
```
python run_roles_wrapper.py --additional-context "User requested to add shopping cart functionality, and I implemented CRUD endpoints for cart management including /cart/add, /cart/remove, and /cart/update"
```
Followed by:
- Implement recommendations from run_roles.py
- git add, commit & push changes to current branch

**Example 3:** If the user requested to implement real-time notifications, and you're working on it:
When you're at this todo list step: Set up WebSocket connection for notifications
Then in your todo list after this, there will be a step to call run_roles like this:
```
python run_roles_wrapper.py --additional-context "User requested to implement real-time notifications, and I set up WebSocket server with connection handling and notification broadcasting logic"
```
Followed by:
- Implement recommendations from run_roles.py
- git add, commit & push changes to current branch

---------

Note! Use Ultrathink mode. Think hard, think deep, Reason thoughtfully and thoroughly, Engage in wise and comprehensive reasoning. 